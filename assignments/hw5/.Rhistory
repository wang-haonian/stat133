### Homework 1
### Due Sun Feb 1st by midnight
### but do try to complete it in section.
### NOTE: For this assignment you will be asked to create several variables in R.
### Please use THE EXACT VARIABLE NAMES given here.
### The variable names will be given inside double angle brackets (e.g. << x >>),
### this is solely so that you can quickly identify the variable name, it has NO
### meaning in R, and you should NOT include the brackets in your code.
### NOTE: Any line that starts with a # will not be executed by R.  You can add
### your own comments but make sure that anything that is part of you solution
### is not commented out.
##################################################################################
### Example (not part of assignment)
### You are asked to create the variable x, it could e.g. be
### any of the following (sans the # at the beginning):
# Create a variable:
# << x >> : a vector with the integers 1 through 100.
# x <- 1:100
### OR e.g. any of the following,
# x = 1:100
# x <- seq(1, 100, by=1)
# x = seq(from=1, to=100, by=1)
### All of the four lines above are examples of valid solutions, you just have
### to provide one solution that works.  The only thing frowned upon would be
### to type out the answer, as in x <- c(1, 2, 3, 4, ... ,100)
##################################################################################
### Assignment starts
##################################################################################
### First part, variable assignment
# Create the variable
# << y >> : a vector of length 100 which has the even numbers from 2 to 200.
# For clarity put your code here, directly below the
y<- seq(2,200,2)
# Create the variable
# << z >> : a vector of length 20 with character entries, "hw1", "hw2", ..., "hw20"
z<-paste("hw",1:20,sep="")
# Create the variable
# << m >> : a vector of length 100 with entries from a standard normal distribution
set.seed(42)
m<- rnorm(100)
# Create the variable
# << mean.m >> : a scalar, the mean of the numbers in << m >>
mean.m<-mean(m)
# Creat the variable
# << sd.m >> : a scalar, the standard deviation of the numbers in << m >>
sd.m<-sd(m)
# Create the variable
# << max.m >> : a scalar, the maximum of the numbers in << m >>
max.m<- max(m)
##################################################################################
### Second part, data frames
### NOTE: .rda and .RData are binary files used to save R variables for later use,
### so you can save any variables in your R workspace with the save() function
### and then later use load() to load them into R at a later date.
### Keep in mind that load() loads the file relative to the working directory
### so you need to go to
###         Session > Set Working Directory > To Source File Location
# Load family.rda that is in your hw1 folder, the variable is called family:
load("family.rda")
### Check what data type the variable is with : class(family)
### now take a look at the data frame by typing family in the console.
# Create a new data frame
# << family.men >> : a data frame that is a subset of family, with only the men
family[family$gender=="m",]
family.men<-family[family$gender=="m",]
# Create a new data frame
# << family.young >> : a data frame, subset of family, with only people *under* 40
family[family$agd<40,]
family.yong<-family[family$age<40,]
# Create a new data frame
# << family.30y68i >> : a data frame, subset of family, with only people *over* 30, *shorter* than 68 in
family[family$age>30 &family$height<68,]
family.30y68i<-family[family$age>30 & family$height<68,]
# Formula for BMI : BMI = (weight in lbs) / (height in in)^2 * 703
# Note: the dataframe has weight in lbs and height in in as required.
# Create a new variable
# << bmi >> : a vector with the BMI of each family member
bmi<-(family$weight)/(family$height)^2*703
family[,"bmi"]<- "bmi"
# Create a new data frame
# << family2 >> : family with an added column of BMI, with column name bmi
family2 <- family
##################################################################################
### Stat 133 Spring 2015
### Homework 1
### Due Sun Feb 1st by midnight
### but do try to complete it in section.
### NOTE: For this assignment you will be asked to create several variables in R.
### Please use THE EXACT VARIABLE NAMES given here.
### The variable names will be given inside double angle brackets (e.g. << x >>),
### this is solely so that you can quickly identify the variable name, it has NO
### meaning in R, and you should NOT include the brackets in your code.
### NOTE: Any line that starts with a # will not be executed by R.  You can add
### your own comments but make sure that anything that is part of you solution
### is not commented out.
##################################################################################
### Example (not part of assignment)
### You are asked to create the variable x, it could e.g. be
### any of the following (sans the # at the beginning):
# Create a variable:
# << x >> : a vector with the integers 1 through 100.
# x <- 1:100
### OR e.g. any of the following,
# x = 1:100
# x <- seq(1, 100, by=1)
# x = seq(from=1, to=100, by=1)
### All of the four lines above are examples of valid solutions, you just have
### to provide one solution that works.  The only thing frowned upon would be
### to type out the answer, as in x <- c(1, 2, 3, 4, ... ,100)
##################################################################################
### Assignment starts
##################################################################################
### First part, variable assignment
# Create the variable
# << y >> : a vector of length 100 which has the even numbers from 2 to 200.
# For clarity put your code here, directly below the
y<- seq(2,200,2)
# Create the variable
# << z >> : a vector of length 20 with character entries, "hw1", "hw2", ..., "hw20"
z<-paste("hw",1:20,sep="")
# Create the variable
# << m >> : a vector of length 100 with entries from a standard normal distribution
set.seed(42)
m<- rnorm(100)
# Create the variable
# << mean.m >> : a scalar, the mean of the numbers in << m >>
mean.m<-mean(m)
# Creat the variable
# << sd.m >> : a scalar, the standard deviation of the numbers in << m >>
sd.m<-sd(m)
# Create the variable
# << max.m >> : a scalar, the maximum of the numbers in << m >>
max.m<- max(m)
##################################################################################
### Second part, data frames
### NOTE: .rda and .RData are binary files used to save R variables for later use,
### so you can save any variables in your R workspace with the save() function
### and then later use load() to load them into R at a later date.
### Keep in mind that load() loads the file relative to the working directory
### so you need to go to
###         Session > Set Working Directory > To Source File Location
# Load family.rda that is in your hw1 folder, the variable is called family:
load("family.rda")
### Check what data type the variable is with : class(family)
### now take a look at the data frame by typing family in the console.
# Create a new data frame
# << family.men >> : a data frame that is a subset of family, with only the men
family[family$gender=="m",]
family.men<-family[family$gender=="m",]
# Create a new data frame
# << family.young >> : a data frame, subset of family, with only people *under* 40
family[family$agd<40,]
family.yong<-family[family$age<40,]
# Create a new data frame
# << family.30y68i >> : a data frame, subset of family, with only people *over* 30, *shorter* than 68 in
family[family$age>30 &family$height<68,]
family.30y68i<-family[family$age>30 & family$height<68,]
# Formula for BMI : BMI = (weight in lbs) / (height in in)^2 * 703
# Note: the dataframe has weight in lbs and height in in as required.
# Create a new variable
# << bmi >> : a vector with the BMI of each family member
bmi<-(family$weight)/(family$height)^2*703
family[,"bmi"]<- "bmi"
# Create a new data frame
# << family2 >> : family with an added column of BMI, with column name bmi
family2 <- family
#################################################################################
#### BML Simulation Study
#### Put in this file the code to run the BML simulation study for a set of input parameters.
#### Save some of the output data into an R object and use save() to save it to disk for reference
#### when you write up your results.
#### The output can e.g. be how many steps the system took until it hit gridlock or
#### how many steps you observered before concluding that it is in a free flowing state.
source("bml_functions.R")
densities <- seq(0,1,by=0.1)
#10*10
op.density1 <- replicate(100, sapply(densities, function(p) bml.sim(10, 10, p)))
op.average1 <- apply(op.density1, 1, mean)
plot(densities, op.average1, xlab="density",ylab="how many steps to hit gridlock",main="10*10 matrix",
pch=".",cex.main=0.8, cex=6, col="blue")
#10*15
op.density2 <- replicate(100, sapply(densities, function(p) bml.sim(10, 15, p)))
op.average2 <- apply(op.density2, 1, mean)
plot(densities, op.average2, xlab="density",ylab="how many steps to hit gridlock",main="10*15 matrix",
pch=".",cex.main=0.8, cex=6, col="blue")
#15*15
op.density3 <- replicate(100, sapply(densities, function(p) bml.sim(15, 15, p)))
op.average3 <- apply(op.density3, 1, mean)
plot(densities, op.average3, xlab="density",ylab="how many steps to hit gridlock",main="15*15 matrix",
pch=".",cex.main=0.8, cex=6, col="blue")
#20*20
op.density4 <- replicate(100, sapply(densities, function(p) bml.sim(20, 20, p)))
op.average4 <- apply(op.density4, 1, mean)
plot(densities, op.average3, xlab="density",ylab="how many steps to hit gridlock",main="20*20 matrix",
pch=".",cex.main=0.8, cex=6, col="blue")
init.m1<-bml.init(10,10,0.4)
init.m2<-bml.init(20,20,0.4)
image(t(apply(init.m1,2,rev)),col=c("white","red","blue"))
image(t(apply(init.m2,2,rev)),col=c("white","red","blue"))
m <- matrix(sample(c(0,1,2),size=100,replace=T,prob=c((1-0.4),0.4/2,0.4/2)),nrow=10,ncol=10)
new.m1<-bml.sim1(init.m1)
image(t(apply(new.m1,2,rev)),col=c("white","red","blue"))
m <- matrix(sample(c(0,1,2),size=400,replace=T,prob=c((1-0.4),0.4/2,0.4/2)),nrow=20,ncol=20)
new.m2<-bml.sim1(init.m2)
image(t(apply(new.m2,2,rev)),col=c("white","red","blue"))
#################################################################################
#### Functions for BML Simulation Study
#### Initialization function.
## Input : size of grid [r and c] and density [p]
## Output : A matrix [m] with entries 0 (no cars) 1 (red cars) or 2 (blue cars)
## that stores the state of the system (i.e. location of red and blue cars)
bml.init <- function(r, c, p){
m <- matrix(sample(c(0,1,2),size=r*c,replace=T,prob=c((1-p),p/2,p/2)),nrow=r,ncol=c)
return(m)
}
#### Function to move the system one step (east and north)
## Input : a matrix [m] of the same type as the output from bml.init()
## Output : TWO variables, the updated [m] and a logical variable
## [grid.new] which should be TRUE if the system changed, FALSE otherwise.
## NOTE : the function should move the red cars once and the blue cars once,
## you can write extra functions that do just a step north or just a step east.
bml.step <- function(m){
move.right <- function(m) {
initial.matrix1 <- m
for (i in 1:nrow(m)){
for (j in 1:ncol(m)) {
if (j > 1)
if(j==ncol(m)) {
if(initial.matrix1[i,j]==1 && initial.matrix[i,1]==0)
{m[i,j]<-0
m[i,1]<-1}
} else{
if(initial.matrix1[i,j]==1 && initial.matrix[i,j+1]==0)
{m[i,j]<-0
m[i,j+1]<-1}}
}
}
return(m)
}
move.up <- function(m) {
initial.matrix2 <- m
for (i in 1:nrow(m)){
for (j in 1:ncol(m)) {
if(i==1) {if (initial.matrix2[1,j]==2 && initial.matrix2[nrow(m),j]==0)
{m[1,j]<-0
m[nrow(m),j]<-2} }
else{if (initial.matrix2[i,j]==2 && initial.matrix2[i-1,j]==0)
{m[i,j]<-0
m[i-1,j]<-2}}
}}
return(m)
}
initial.matrix <- m
m <- move.up(move.right(m))
grid.new <- !identical (initial.matrix,m)
return(list(m,grid.new))
#return(list(m, grid.new))
}
#### Function to do a simulation for a given set of input parameters
## Input : size of grid [r and c] and density [p]
## Output : *up to you* (e.g. number of steps taken, did you hit gridlock, ...)
bml.sim <- function(r, c, p){
m <- bml.init(r,c,p)
for (i in 1:1200) {
m <- bml.step(m)[[1]]
number.steps <- i
if (bml.step(m)[[2]]==F) break
}
return(number.steps)}
bml.sim1 <- function(r, c, p){
for (i in 1:1200) {
m <- bml.step(m)[[1]]
number.steps <- i
if (bml.step(m)[[2]]==F) break
}
return(m)}
source("bml_functions.R")
setwd("~/src/stat133/assignments/hw5")
source("bml_functions.R")
densities <- seq(0,1,by=0.1)
#10*10
op.density1 <- replicate(100, sapply(densities, function(p) bml.sim(10, 10, p)))
op.average1 <- apply(op.density1, 1, mean)
plot(densities, op.average1, xlab="density",ylab="how many steps to hit gridlock",main="10*10 matrix",
pch=".",cex.main=0.8, cex=6, col="blue")
#10*15
op.density2 <- replicate(100, sapply(densities, function(p) bml.sim(10, 15, p)))
View(op.density1)
View(m)
op.average1
op.density2 <- replicate(100, sapply(densities, function(p) bml.sim(10, 15, p)))
op.average2 <- apply(op.density2, 1, mean)
plot(densities, op.average2, xlab="density",ylab="how many steps to hit gridlock",main="10*15 matrix",
pch=".",cex.main=0.8, cex=6, col="blue")
View(op.density2)
op.average2
init.m1<-bml.init(10,10,0.4)
init.m2<-bml.init(20,20,0.4)
op.density3 <- replicate(100, sapply(densities, function(p) bml.sim(15, 15, p)))
op.average3 <- apply(op.density3, 1, mean)
plot(densities, op.average3, xlab="density",ylab="how many steps to hit gridlock",main="15*15 matrix",
pch=".",cex.main=0.8, cex=6, col="blue")
#20*20
op.density4 <- replicate(100, sapply(densities, function(p) bml.sim(20, 20, p)))
op.average4 <- apply(op.density4, 1, mean)
plot(densities, op.average3, xlab="density",ylab="how many steps to hit gridlock",main="20*20 matrix",
pch=".",cex.main=0.8, cex=6, col="blue")
init.m1<-bml.init(10,10,0.4)
init.m2<-bml.init(20,20,0.4)
image(t(apply(init.m1,2,rev)),col=c("white","red","blue"))
image(t(apply(init.m2,2,rev)),col=c("white","red","blue"))
m <- matrix(sample(c(0,1,2),size=100,replace=T,prob=c((1-0.4),0.4/2,0.4/2)),nrow=10,ncol=10)
new.m1<-bml.sim1(init.m1)
image(t(apply(new.m1,2,rev)),col=c("white","red","blue"))
m <- matrix(sample(c(0,1,2),size=400,replace=T,prob=c((1-0.4),0.4/2,0.4/2)),nrow=20,ncol=20)
new.m2<-bml.sim1(init.m2)
image(t(apply(new.m2,2,rev)),col=c("white","red","blue"))
View(op.density1)
op.average1
m <- matrix(sample(c(0,1,2),size=100,replace=T,prob=c((1-0.7),0.7/2,0.7/2)),nrow=10,ncol=10)
new.m1<-bml.sim1(init.m1)
image(t(apply(new.m1,2,rev)),col=c("white","red","blue"))
m <- matrix(sample(c(0,1,2),size=400,replace=T,prob=c((1-0.7),0.7/2,0.7/2)),nrow=20,ncol=20)
new.m2<-bml.sim1(init.m2)
image(t(apply(new.m2,2,rev)),col=c("white","red","blue"))
m <- matrix(sample(c(0,1,2),size=100,replace=T,prob=c((1-0.4),0.4/2,0.4/2)),nrow=10,ncol=10)
new.m1<-bml.sim1(init.m1)
image(t(apply(new.m1,2,rev)),col=c("white","red","blue"))
m <- matrix(sample(c(0,1,2),size=100,replace=T,prob=c((1-0.4),0.4/2,0.4/2)),nrow=10,ncol=10)
new.m1<-bml.sim1(init.m1)
image(t(apply(new.m1,2,rev)),col=c("white","red","blue"))
m <- matrix(sample(c(0,1,2),size=100,replace=T,prob=c((1-0.4),0.4/2,0.4/2)),nrow=10,ncol=10)
new.m1<-bml.sim1(init.m1)
image(t(apply(new.m1,2,rev)),col=c("white","red","blue"))
m <- matrix(sample(c(0,1,2),size=100,replace=T,prob=c((1-0.4),0.4/2,0.4/2)),nrow=10,ncol=10)
new.m1<-bml.sim1(init.m1)
image(t(apply(new.m1,2,rev)),col=c("white","red","blue"))
m <- matrix(sample(c(0,1,2),size=100,replace=T,prob=c((1-0.4),0.4/2,0.4/2)),nrow=10,ncol=10)
new.m1<-bml.sim1(init.m1)
image(t(apply(new.m1,2,rev)),col=c("white","red","blue"))
m <- matrix(sample(c(0,1,2),size=100,replace=T,prob=c((1-0.4),0.4/2,0.4/2)),nrow=10,ncol=10)
new.m1<-bml.sim1(init.m1)
image(t(apply(new.m1,2,rev)),col=c("white","red","blue"))
m <- matrix(sample(c(0,1,2),size=100,replace=T,prob=c((1-0.4),0.4/2,0.4/2)),nrow=10,ncol=10)
new.m1<-bml.sim1(init.m1)
image(t(apply(new.m1,2,rev)),col=c("white","red","blue"))
m <- matrix(sample(c(0,1,2),size=100,replace=T,prob=c((1-0.4),0.4/2,0.4/2)),nrow=10,ncol=10)
new.m1<-bml.sim1(init.m1)
image(t(apply(new.m1,2,rev)),col=c("white","red","blue"))
m <- matrix(sample(c(0,1,2),size=100,replace=T,prob=c((1-0.4),0.4/2,0.4/2)),nrow=10,ncol=10)
new.m1<-bml.sim1(init.m1)
image(t(apply(new.m1,2,rev)),col=c("white","red","blue"))
m <- matrix(sample(c(0,1,2),size=100,replace=T,prob=c((1-0.4),0.4/2,0.4/2)),nrow=10,ncol=10)
new.m1<-bml.sim1(init.m1)
image(t(apply(new.m1,2,rev)),col=c("white","red","blue"))
m <- matrix(sample(c(0,1,2),size=100,replace=T,prob=c((1-0.4),0.4/2,0.4/2)),nrow=10,ncol=10)
new.m1<-bml.sim1(init.m1)
image(t(apply(new.m1,2,rev)),col=c("white","red","blue"))
m <- matrix(sample(c(0,1,2),size=100,replace=T,prob=c((1-0.4),0.4/2,0.4/2)),nrow=10,ncol=10)
new.m1<-bml.sim1(init.m1)
image(t(apply(new.m1,2,rev)),col=c("white","red","blue"))
m <- matrix(sample(c(0,1,2),size=100,replace=T,prob=c((1-0.4),0.4/2,0.4/2)),nrow=10,ncol=10)
new.m1<-bml.sim1(init.m1)
image(t(apply(new.m1,2,rev)),col=c("white","red","blue"))
m <- matrix(sample(c(0,1,2),size=100,replace=T,prob=c((1-0.4),0.4/2,0.4/2)),nrow=10,ncol=10)
new.m1<-bml.sim1(init.m1)
image(t(apply(new.m1,2,rev)),col=c("white","red","blue"))
m <- matrix(sample(c(0,1,2),size=100,replace=T,prob=c((1-0.4),0.4/2,0.4/2)),nrow=10,ncol=10)
new.m1<-bml.sim1(init.m1)
image(t(apply(new.m1,2,rev)),col=c("white","red","blue"))
m <- matrix(sample(c(0,1,2),size=100,replace=T,prob=c((1-0.4),0.4/2,0.4/2)),nrow=10,ncol=10)
new.m1<-bml.sim1(init.m1)
image(t(apply(new.m1,2,rev)),col=c("white","red","blue"))
m <- matrix(sample(c(0,1,2),size=100,replace=T,prob=c((1-0.4),0.4/2,0.4/2)),nrow=10,ncol=10)
new.m1<-bml.sim1(init.m1)
image(t(apply(new.m1,2,rev)),col=c("white","red","blue"))
m <- matrix(sample(c(0,1,2),size=100,replace=T,prob=c((1-0.4),0.4/2,0.4/2)),nrow=10,ncol=10)
new.m1<-bml.sim1(init.m1)
image(t(apply(new.m1,2,rev)),col=c("white","red","blue"))
m <- matrix(sample(c(0,1,2),size=100,replace=T,prob=c((1-0.4),0.4/2,0.4/2)),nrow=10,ncol=10)
new.m1<-bml.sim1(init.m1)
image(t(apply(new.m1,2,rev)),col=c("white","red","blue"))
m <- matrix(sample(c(0,1,2),size=100,replace=T,prob=c((1-0.4),0.4/2,0.4/2)),nrow=10,ncol=10)
new.m1<-bml.sim1(init.m1)
image(t(apply(new.m1,2,rev)),col=c("white","red","blue"))
m <- matrix(sample(c(0,1,2),size=100,replace=T,prob=c((1-0.4),0.4/2,0.4/2)),nrow=10,ncol=10)
new.m1<-bml.sim1(init.m1)
image(t(apply(new.m1,2,rev)),col=c("white","red","blue"))
m <- matrix(sample(c(0,1,2),size=100,replace=T,prob=c((1-0.4),0.4/2,0.4/2)),nrow=10,ncol=10)
new.m1<-bml.sim1(init.m1)
image(t(apply(new.m1,2,rev)),col=c("white","red","blue"))
m <- matrix(sample(c(0,1,2),size=100,replace=T,prob=c((1-0.4),0.4/2,0.4/2)),nrow=10,ncol=10)
new.m1<-bml.sim1(init.m1)
image(t(apply(new.m1,2,rev)),col=c("white","red","blue"))
m <- matrix(sample(c(0,1,2),size=100,replace=T,prob=c((1-0.4),0.4/2,0.4/2)),nrow=10,ncol=10)
new.m1<-bml.sim1(init.m1)
image(t(apply(new.m1,2,rev)),col=c("white","red","blue"))
m <- matrix(sample(c(0,1,2),size=100,replace=T,prob=c((1-0.4),0.4/2,0.4/2)),nrow=10,ncol=10)
new.m1<-bml.sim1(init.m1)
image(t(apply(new.m1,2,rev)),col=c("white","red","blue"))
m <- matrix(sample(c(0,1,2),size=100,replace=T,prob=c((1-0.4),0.4/2,0.4/2)),nrow=10,ncol=10)
new.m1<-bml.sim1(init.m1)
image(t(apply(new.m1,2,rev)),col=c("white","red","blue"))
m <- matrix(sample(c(0,1,2),size=100,replace=T,prob=c((1-0.4),0.4/2,0.4/2)),nrow=10,ncol=10)
new.m1<-bml.sim1(init.m1)
image(t(apply(new.m1,2,rev)),col=c("white","red","blue"))
m <- matrix(sample(c(0,1,2),size=100,replace=T,prob=c((1-0.4),0.4/2,0.4/2)),nrow=10,ncol=10)
new.m1<-bml.sim1(init.m1)
image(t(apply(new.m1,2,rev)),col=c("white","red","blue"))
m <- matrix(sample(c(0,1,2),size=100,replace=T,prob=c((1-0.4),0.4/2,0.4/2)),nrow=10,ncol=10)
new.m1<-bml.sim1(init.m1)
image(t(apply(new.m1,2,rev)),col=c("white","red","blue"))
m <- matrix(sample(c(0,1,2),size=100,replace=T,prob=c((1-0.4),0.4/2,0.4/2)),nrow=10,ncol=10)
new.m1<-bml.sim1(init.m1)
image(t(apply(new.m1,2,rev)),col=c("white","red","blue"))
m <- matrix(sample(c(0,1,2),size=100,replace=T,prob=c((1-0.4),0.4/2,0.4/2)),nrow=10,ncol=10)
new.m1<-bml.sim1(init.m1)
image(t(apply(new.m1,2,rev)),col=c("white","red","blue"))
m <- matrix(sample(c(0,1,2),size=100,replace=T,prob=c((1-0.4),0.4/2,0.4/2)),nrow=10,ncol=10)
new.m1<-bml.sim1(init.m1)
image(t(apply(new.m1,2,rev)),col=c("white","red","blue"))
m <- matrix(sample(c(0,1,2),size=100,replace=T,prob=c((1-0.4),0.4/2,0.4/2)),nrow=10,ncol=10)
new.m1<-bml.sim1(init.m1)
image(t(apply(new.m1,2,rev)),col=c("white","red","blue"))
m <- matrix(sample(c(0,1,2),size=100,replace=T,prob=c((1-0.4),0.4/2,0.4/2)),nrow=10,ncol=10)
new.m1<-bml.sim1(init.m1)
image(t(apply(new.m1,2,rev)),col=c("white","red","blue"))
m <- matrix(sample(c(0,1,2),size=100,replace=T,prob=c((1-0.4),0.4/2,0.4/2)),nrow=10,ncol=10)
new.m1<-bml.sim1(init.m1)
image(t(apply(new.m1,2,rev)),col=c("white","red","blue"))
m <- matrix(sample(c(0,1,2),size=100,replace=T,prob=c((1-0.4),0.4/2,0.4/2)),nrow=10,ncol=10)
new.m1<-bml.sim1(init.m1)
image(t(apply(new.m1,2,rev)),col=c("white","red","blue"))
m <- matrix(sample(c(0,1,2),size=100,replace=T,prob=c((1-0.4),0.4/2,0.4/2)),nrow=10,ncol=10)
new.m1<-bml.sim1(init.m1)
image(t(apply(new.m1,2,rev)),col=c("white","red","blue"))
m <- matrix(sample(c(0,1,2),size=100,replace=T,prob=c((1-0.4),0.4/2,0.4/2)),nrow=10,ncol=10)
new.m1<-bml.sim1(init.m1)
image(t(apply(new.m1,2,rev)),col=c("white","red","blue"))
m <- matrix(sample(c(0,1,2),size=100,replace=T,prob=c((1-0.4),0.4/2,0.4/2)),nrow=10,ncol=10)
new.m1<-bml.sim1(init.m1)
image(t(apply(new.m1,2,rev)),col=c("white","red","blue"))
m <- matrix(sample(c(0,1,2),size=100,replace=T,prob=c((1-0.4),0.4/2,0.4/2)),nrow=10,ncol=10)
new.m1<-bml.sim1(init.m1)
image(t(apply(new.m1,2,rev)),col=c("white","red","blue"))
m <- matrix(sample(c(0,1,2),size=100,replace=T,prob=c((1-0.4),0.4/2,0.4/2)),nrow=10,ncol=10)
new.m1<-bml.sim1(init.m1)
image(t(apply(new.m1,2,rev)),col=c("white","red","blue"))
m <- matrix(sample(c(0,1,2),size=100,replace=T,prob=c((1-0.4),0.4/2,0.4/2)),nrow=10,ncol=10)
new.m1<-bml.sim1(init.m1)
image(t(apply(new.m1,2,rev)),col=c("white","red","blue"))
m <- matrix(sample(c(0,1,2),size=100,replace=T,prob=c((1-0.4),0.4/2,0.4/2)),nrow=10,ncol=10)
new.m1<-bml.sim1(init.m1)
image(t(apply(new.m1,2,rev)),col=c("white","red","blue"))
m <- matrix(sample(c(0,1,2),size=100,replace=T,prob=c((1-0.4),0.4/2,0.4/2)),nrow=10,ncol=10)
new.m1<-bml.sim1(init.m1)
image(t(apply(new.m1,2,rev)),col=c("white","red","blue"))
m <- matrix(sample(c(0,1,2),size=100,replace=T,prob=c((1-0.4),0.4/2,0.4/2)),nrow=10,ncol=10)
new.m1<-bml.sim1(init.m1)
image(t(apply(new.m1,2,rev)),col=c("white","red","blue"))
m <- matrix(sample(c(0,1,2),size=100,replace=T,prob=c((1-0.4),0.4/2,0.4/2)),nrow=10,ncol=10)
new.m1<-bml.sim1(init.m1)
image(t(apply(new.m1,2,rev)),col=c("white","red","blue"))
m <- matrix(sample(c(0,1,2),size=100,replace=T,prob=c((1-0.4),0.4/2,0.4/2)),nrow=10,ncol=10)
new.m1<-bml.sim1(init.m1)
image(t(apply(new.m1,2,rev)),col=c("white","red","blue"))
m <- matrix(sample(c(0,1,2),size=100,replace=T,prob=c((1-0.4),0.4/2,0.4/2)),nrow=10,ncol=10)
new.m1<-bml.sim1(init.m1)
image(t(apply(new.m1,2,rev)),col=c("white","red","blue"))
m <- matrix(sample(c(0,1,2),size=100,replace=T,prob=c((1-0.4),0.4/2,0.4/2)),nrow=10,ncol=10)
new.m1<-bml.sim1(init.m1)
image(t(apply(new.m1,2,rev)),col=c("white","red","blue"))
m <- matrix(sample(c(0,1,2),size=100,replace=T,prob=c((1-0.4),0.4/2,0.4/2)),nrow=10,ncol=10)
new.m1<-bml.sim1(init.m1)
image(t(apply(new.m1,2,rev)),col=c("white","red","blue"))
m <- matrix(sample(c(0,1,2),size=100,replace=T,prob=c((1-0.4),0.4/2,0.4/2)),nrow=10,ncol=10)
new.m1<-bml.sim1(init.m1)
image(t(apply(new.m1,2,rev)),col=c("white","red","blue"))
m <- matrix(sample(c(0,1,2),size=100,replace=T,prob=c((1-0.4),0.4/2,0.4/2)),nrow=10,ncol=10)
new.m1<-bml.sim1(init.m1)
image(t(apply(new.m1,2,rev)),col=c("white","red","blue"))
m <- matrix(sample(c(0,1,2),size=100,replace=T,prob=c((1-0.4),0.4/2,0.4/2)),nrow=10,ncol=10)
new.m1<-bml.sim1(init.m1)
image(t(apply(new.m1,2,rev)),col=c("white","red","blue"))
m <- matrix(sample(c(0,1,2),size=100,replace=T,prob=c((1-0.4),0.4/2,0.4/2)),nrow=10,ncol=10)
new.m1<-bml.sim1(init.m1)
image(t(apply(new.m1,2,rev)),col=c("white","red","blue"))
m <- matrix(sample(c(0,1,2),size=100,replace=T,prob=c((1-0.4),0.4/2,0.4/2)),nrow=10,ncol=10)
new.m1<-bml.sim1(init.m1)
image(t(apply(new.m1,2,rev)),col=c("white","red","blue"))
init.m1<-bml.init(10,10,0.4)
image(t(apply(init.m1,2,rev)),col=c("white","red","blue"))
init.m1<-bml.init(10,10,0.4)
init.m2<-bml.init(20,20,0.4)
image(t(apply(init.m1,2,rev)),col=c("white","red","blue"))
image(t(apply(init.m2,2,rev)),col=c("white","red","blue"))
init.m1<-bml.init(10,10,0.4)
init.m2<-bml.init(20,20,0.4)
image(t(apply(init.m1,2,rev)),col=c("white","red","blue"))
image(t(apply(init.m2,2,rev)),col=c("white","red","blue"))
init.m1<-bml.init(10,10,0.4)
init.m2<-bml.init(20,20,0.4)
image(t(apply(init.m1,2,rev)),col=c("white","red","blue"))
image(t(apply(init.m2,2,rev)),col=c("white","red","blue"))
op.average4
init.m1<-bml.init(10,10,0.4)
init.m2<-bml.init(20,20,0.4)
image(t(apply(init.m1,2,rev)),col=c("white","red","blue"))
image(t(apply(init.m2,2,rev)),col=c("white","red","blue"))
m <- matrix(sample(c(0,1,2),size=400,replace=T,prob=c((1-0.4),0.4/2,0.4/2)),nrow=20,ncol=20)
new.m2<-bml.sim1(init.m2)
image(t(apply(new.m2,2,rev)),col=c("white","red","blue"))
