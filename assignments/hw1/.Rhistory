# <sampling.sigma.est> : The bootstrap estimate if type="bootstrap" and the jackknife estimate if type="jackknife"
# Note: this function calls the previous two functions.
samplingVarEst <- function( x,k, B ){
if  (k=="bootstrap")
{ return(bootstrapVarEst(x,B))
}
else{
return(jackknifeVarEst(x))
}}
# HW 4
# Writing functions
# Due Thursday February 26th by midnight
# This .r file should contain your code
library(grid)
#### Function #1
# Implement the function "listLengths".
# Input variable:
# <data.list>: a list whose elements are vectors of varying length
# Output variable:
# <element.lengths>: a numeric vector whose entries are the lengths of each
#   element of <data.list>
listLengths <- function(data.list) {
element.lengths <- sapply(data.list, length)
return(element.list)
}
#### Function 2
#### Implement the function "powers"
# Input variable :
# <x> : a numeric vector of length n
# <k> : an integer
# Output variable
# <x.powers> : A matrix of size [n x k] where the first column is x, the second column x^2, the third column x^4, etc.
#              the column names should be : "x", "x^2", "x^3" etc.
powers <- function(x, k){
x.powers=matrix(data=NA, nrow=length(x), ncol=k )
for (i in 1:k){
x.powers[,i]=x^i}
return(x.powers)
}
# powers(2,5)
#### Function #3
#### Implement the function "recipeConversion"
# Input variable:
# <recipe> : A data frame with three columns named "amount", "unit" and "ingredient"
# Output variable:
# <recipe.metric> : A data frame with three columns where cups have been converted to ml and ounces to grams.
#                   the number in "amount" should be updated, and the entry in "unit" changed
#                   both ml and gr should be rounded to the nearest multiple of 5,
#                   e.g. a row that read : [2 cups flour] should now be [475 ml flour]
#                   Note, if the "unit" is neither "cup"/"cups" nor "oz" the row should not be
# <recipe.metric> : Ac
# The conversion constants are:
# 1 cup = 236.6 ml and 1 oz = 28.3 gr
# Please use these exact numbers, do not add decimal places.
# "unit" can take any of a number of values but you need to find the rows where
# "unit" is : "cup", "cups" or "oz"
# Note: to find a match in "unit" you have a few different options, you can go row by row
# and check if the unit is equal to cup/cups/oz using the "==" operator, you can use the
# match() or %in% operators or finally you can look at the function grep().
# If the column names of the input data frame are not "amount", "unit" and "ingredient" the
# function should stop and print out an error message
# Put your code here
recipeConversion <- function(recipe){
if(!(("amount"%in% names(recipe)) & ("unit" %in% names(recipe)) & ("ingredient" %in% names(recipe)))){
stop("error")
}
else{
recipe$unit = as.character(recipe$unit)
if(recipe$unit == "cup" | recipe$unit == "cups"){
recipe$amount= round((recipe$amount*236.6)/5)*5
recipe$unit= "ml"}
else{
recipe$amount = recipe$amount*28.3
recipe$unit = "gr"}
return(recipe)}
}
a=data.frame(1,"cup","milk")
colnames(a)=c("amount","unit","ingredient")
recipeConversion(a)
#### Function #4a
# Implement the function "bootstrapVarEst"
# Input variable:
# <x> : data vector
# <B> : the number of boostrap iterations
# Output variable:
# <boot.sigma2.est> : Bootstrap estimate for the variance of the sample mean (see lecture notes)
# The bootstrap is a resampling method used here to estimate the variance of the sample mean.
# Given a sample, X_1, X_2, ..., X_n of observations we want to estimate the mean (expected value)
# of the distrubution of the random variables X, and we want an estimate of the variance of that
# sample mean (note, not the variance of the X_i but the variance of the sample mean).
# We do this by:
# -- Setting B, the number of bootstrap iterations (typically 1000, 5000 or 10000)
# -- For each i in 1:B we draw a new sample (called bootstrap sample) of size n from the original sample
#    i.e. we draw n values at random *with replacement* from the observations X_1, ..., X_n. (use sample())
# -- Calculate, and store, the mean of this bootstrap sample, call that mu_i (i in 1:B)
# -- The bootstrap variance is the sample variance of mu_1, mu_2, ..., mu_B
bootstrapVarEst <- function(x, B){
sample_means<-replicate(B,mean(sample(x,length(x),replace=T)))
sample_variance=var(sample_means)
return (sample_variance)
}
x=c(1,2,3,4,5,6,7,8,9,10)
B=1000
bootstrapVarEst(x,B)
#### Function #4b
#### Implement the function "jackknifeVarEst"
# Input variable:
# <x> : data vector
# Output variable:
# <jack.sigma2.est> : Jackknife estimate for the variance of the sample mean (see lecture notes)
# The jackknife is a resampling method used here to estimate the variance of the sample mean.
# Given a sample, X_1, X_2, ..., X_n of observations we want to estimate the mean (expected value)
# of the distrubution of the random variables X, and we want an estimate of the variance of that
# sample mean (note, not the variance of the X_i but the variance of the sample mean).
# We do this by:
# -- For each i in 1:n we omit the i-th observation (i.e. take the sample X_1, ..., X_[i-1], X_[i+1], ..., X_n)
#     for this reduced sample calculate the sample mean (get mu_1, mu_2, ..., mu_n)
# -- The jackknife variance is the sample variance of mu_1, mu_2, ..., mu_n
jackknifeVarEst <- function(x){
sample_means = rep(0,length(x))
for (i in 1:length(x)){
sample_means = mean(x[-i])
}
sample_variance=var(sample_means)
return (sample_variance)
}
#### Function #4c
#### Implement the function "samplingVarEst"
# Input variables:
# <x> : data vector
# <type> : string that takes the values "bootstrap" or "jackknife", the default should be bootstrap.
# Output variable:
# <sampling.sigma.est> : The bootstrap estimate if type="bootstrap" and the jackknife estimate if type="jackknife"
# Note: this function calls the previous two functions.
samplingVarEst <- function( x,k, B ){
if  (k=="bootstrap")
{ return(bootstrapVarEst(x,B))
}
else{
return(jackknifeVarEst(x))
}}
recipeConversion <- function(recipe){
if(!(("amount"%in% names(recipe)) & ("unit" %in% names(recipe)) & ("ingredient" %in% names(recipe)))){
stop("error")
}
else{
recipe$unit = as.character(recipe$unit)
if(recipe$unit == "cup" | recipe$unit == "cups"){
recipe$amount= round((recipe$amount*236.6)/5)*5
recipe$unit= "ml"}
else{
recipe$amount = round((recipe$amount*28.3)/5)*5
recipe$unit = "gr"}
return(recipe)}
}
a=data.frame(1,"cup","milk")
colnames(a)=c("amount","unit","ingredient")
recipeConversion(a)
jackknifeVarEst <- function(x){
sample_means = rep(0,length(x))
for (i in 1:length(x)){
sample_means = mean(x[-i])
}
sample_variance=var(sample_means)
return (sample_variance)
}
sample_mean
sample_means
jackknifeVarEst <- function(x){
sample_means = rep(0,length(x))
for (i in 1:length(x)){
sample_means = mean(x[-i])
}
sample_variance=var(sample_means)
return (sample_variance)
}
sample_means
jackknifeVarEst(5)
jackknifeVarEst <- function(x){
sample_means = rep(0,length(x))
for (i in 1:length(x)){
sample_means = mean(x[-i])
}
sample_variance=var(sample_means)
return (sample_variance)
}
jackknifeVarEst <- function(x){
sample_means = rep(0,length(x))
for (i in 1:length(x)){
sample_means = mean(x[-i])
}
sample_variance=var(sample_means)
return (sample_variance)
}
x=10
jackknifeVarEst(x)
10)
jackknifeVarEst <- function(x){
sample_means = rep(0,length(x))
for (i in 1:length(x)){
sample_means = mean(x[-i])
}
sample_variance=var(sample_means)
return (sample_variance)
}
x=c(1,2,3,4,5,6,7,8,9,10)
jackknifeVarEst(x)
x=c(1,2,3,4,5,6,7,8,9,10)
sample_means = rep(0,length(x))
for (i in 1:length(x)){
sample_means = mean(x[-i])
}
x
sample_means
sample_variance=var(sample_means)
sample_variance
jackknifeVarEst <- function(x){
sample_means = rep(0,length(x))
for (i in 1:length(x)){
sample_means[i] = mean(x[-i])
}
sample_variance=var(sample_means)
return (sample_variance)
}
x=c(1,2,3,4,5,6,7,8,9,10)
jackknifeVarEst(10)
jackknifeVarEst(x)
jackknifeVarEst <- function(x){
sample_means = rep(0,length(x))
for (i in 1:length(x)){
sample_means[i] = mean(x[-i])
}
sample_variance=var(sample_means)
return (sample_variance)
}
jackknifeVarEst(20)
jackknifeVarEst(x)
bootstrapVarEst <- function(x, B){
sample_means<-replicate(B,mean(sample(x,length(x),replace=T)))
sample_variance=var(sample_means)
return (sample_variance)
}
bootstrapVarEst(x,5000)
bootstrapVarEst <- function(x, B){
sample_means<-replicate(B,mean(sample(x,length(x),replace=T)))
sample_variance=var(sample_means)
return (sample_variance)
}
x=c(1,2,3,4,5,6,7,8,9,10)
B=1000
bootstrapVarEst(x,B)
samplingVarEst <- function( x,k, B ){
if  (k=="bootstrap")
{ return(bootstrapVarEst(x,B))
}
else{
return(jackknifeVarEst(x))
}}
##################################################################################
### Stat 133 Spring 2015
### Homework 1
### Due Sun Feb 1st by midnight
### but do try to complete it in section.
### NOTE: For this assignment you will be asked to create several variables in R.
### Please use THE EXACT VARIABLE NAMES given here.
### The variable names will be given inside double angle brackets (e.g. << x >>),
### this is solely so that you can quickly identify the variable name, it has NO
### meaning in R, and you should NOT include the brackets in your code.
### NOTE: Any line that starts with a # will not be executed by R.  You can add
### your own comments but make sure that anything that is part of you solution
### is not commented out.
##################################################################################
### Example (not part of assignment)
### You are asked to create the variable x, it could e.g. be
### any of the following (sans the # at the beginning):
# Create a variable:
# << x >> : a vector with the integers 1 through 100.
# x <- 1:100
### OR e.g. any of the following,
# x = 1:100
# x <- seq(1, 100, by=1)
# x = seq(from=1, to=100, by=1)
### All of the four lines above are examples of valid solutions, you just have
### to provide one solution that works.  The only thing frowned upon would be
### to type out the answer, as in x <- c(1, 2, 3, 4, ... ,100)
##################################################################################
### Assignment starts
##################################################################################
### First part, variable assignment
# Create the variable
# << y >> : a vector of length 100 which has the even numbers from 2 to 200.
# For clarity put your code here, directly below the
y<- seq(2,200,2)
# Create the variable
# << z >> : a vector of length 20 with character entries, "hw1", "hw2", ..., "hw20"
z<-paste("hw",1:20,sep="")
# Create the variable
# << m >> : a vector of length 100 with entries from a standard normal distribution
set.seed(42)
m<- rnorm(100)
# Create the variable
# << mean.m >> : a scalar, the mean of the numbers in << m >>
mean.m<-mean(m)
# Creat the variable
# << sd.m >> : a scalar, the standard deviation of the numbers in << m >>
sd.m<-sd(m)
# Create the variable
# << max.m >> : a scalar, the maximum of the numbers in << m >>
max.m<- max(m)
##################################################################################
### Second part, data frames
### NOTE: .rda and .RData are binary files used to save R variables for later use,
### so you can save any variables in your R workspace with the save() function
### and then later use load() to load them into R at a later date.
### Keep in mind that load() loads the file relative to the working directory
### so you need to go to
###         Session > Set Working Directory > To Source File Location
# Load family.rda that is in your hw1 folder, the variable is called family:
load("family.rda")
### Check what data type the variable is with : class(family)
### now take a look at the data frame by typing family in the console.
# Create a new data frame
# << family.men >> : a data frame that is a subset of family, with only the men
family[family$gender=="m",]
family.men<-family[family$gender=="m",]
# Create a new data frame
# << family.young >> : a data frame, subset of family, with only people *under* 40
family[family$agd<40,]
family.yong<-family[family$age<40,]
# Create a new data frame
# << family.30y68i >> : a data frame, subset of family, with only people *over* 30, *shorter* than 68 in
family[family$age>30 &family$height<68,]
family.30y68i<-family[family$age>30 & family$height<68,]
# Formula for BMI : BMI = (weight in lbs) / (height in in)^2 * 703
# Note: the dataframe has weight in lbs and height in in as required.
# Create a new variable
# << bmi >> : a vector with the BMI of each family member
bmi<-(family$weight)/(family$height)^2*703
family[,"bmi"]<- "bmi"
# Create a new data frame
# << family2 >> : family with an added column of BMI, with column name bmi
family2 <- family
##################################################################################
### Stat 133 Spring 2015
### Homework 1
### Due Sun Feb 1st by midnight
### but do try to complete it in section.
### NOTE: For this assignment you will be asked to create several variables in R.
### Please use THE EXACT VARIABLE NAMES given here.
### The variable names will be given inside double angle brackets (e.g. << x >>),
### this is solely so that you can quickly identify the variable name, it has NO
### meaning in R, and you should NOT include the brackets in your code.
### NOTE: Any line that starts with a # will not be executed by R.  You can add
### your own comments but make sure that anything that is part of you solution
### is not commented out.
##################################################################################
### Example (not part of assignment)
### You are asked to create the variable x, it could e.g. be
### any of the following (sans the # at the beginning):
# Create a variable:
# << x >> : a vector with the integers 1 through 100.
# x <- 1:100
### OR e.g. any of the following,
# x = 1:100
# x <- seq(1, 100, by=1)
# x = seq(from=1, to=100, by=1)
### All of the four lines above are examples of valid solutions, you just have
### to provide one solution that works.  The only thing frowned upon would be
### to type out the answer, as in x <- c(1, 2, 3, 4, ... ,100)
##################################################################################
### Assignment starts
##################################################################################
### First part, variable assignment
# Create the variable
# << y >> : a vector of length 100 which has the even numbers from 2 to 200.
# For clarity put your code here, directly below the
y<- seq(2,200,2)
# Create the variable
# << z >> : a vector of length 20 with character entries, "hw1", "hw2", ..., "hw20"
z<-paste("hw",1:20,sep="")
# Create the variable
# << m >> : a vector of length 100 with entries from a standard normal distribution
set.seed(42)
m<- rnorm(100)
# Create the variable
# << mean.m >> : a scalar, the mean of the numbers in << m >>
mean.m<-mean(m)
# Creat the variable
# << sd.m >> : a scalar, the standard deviation of the numbers in << m >>
sd.m<-sd(m)
# Create the variable
# << max.m >> : a scalar, the maximum of the numbers in << m >>
max.m<- max(m)
##################################################################################
### Second part, data frames
### NOTE: .rda and .RData are binary files used to save R variables for later use,
### so you can save any variables in your R workspace with the save() function
### and then later use load() to load them into R at a later date.
### Keep in mind that load() loads the file relative to the working directory
### so you need to go to
###         Session > Set Working Directory > To Source File Location
# Load family.rda that is in your hw1 folder, the variable is called family:
load("family.rda")
### Check what data type the variable is with : class(family)
### now take a look at the data frame by typing family in the console.
# Create a new data frame
# << family.men >> : a data frame that is a subset of family, with only the men
family[family$gender=="m",]
family.men<-family[family$gender=="m",]
# Create a new data frame
# << family.young >> : a data frame, subset of family, with only people *under* 40
family[family$agd<40,]
family.yong<-family[family$age<40,]
# Create a new data frame
# << family.30y68i >> : a data frame, subset of family, with only people *over* 30, *shorter* than 68 in
family[family$age>30 &family$height<68,]
family.30y68i<-family[family$age>30 & family$height<68,]
# Formula for BMI : BMI = (weight in lbs) / (height in in)^2 * 703
# Note: the dataframe has weight in lbs and height in in as required.
# Create a new variable
# << bmi >> : a vector with the BMI of each family member
bmi<-(family$weight)/(family$height)^2*703
family[,"bmi"]<- "bmi"
# Create a new data frame
# << family2 >> : family with an added column of BMI, with column name bmi
family2 <- family
setwd("~/src/stat133/assignments/hw1")
##################################################################################
### Stat 133 Spring 2015
### Homework 1
### Due Sun Feb 1st by midnight
### but do try to complete it in section.
### NOTE: For this assignment you will be asked to create several variables in R.
### Please use THE EXACT VARIABLE NAMES given here.
### The variable names will be given inside double angle brackets (e.g. << x >>),
### this is solely so that you can quickly identify the variable name, it has NO
### meaning in R, and you should NOT include the brackets in your code.
### NOTE: Any line that starts with a # will not be executed by R.  You can add
### your own comments but make sure that anything that is part of you solution
### is not commented out.
##################################################################################
### Example (not part of assignment)
### You are asked to create the variable x, it could e.g. be
### any of the following (sans the # at the beginning):
# Create a variable:
# << x >> : a vector with the integers 1 through 100.
# x <- 1:100
### OR e.g. any of the following,
# x = 1:100
# x <- seq(1, 100, by=1)
# x = seq(from=1, to=100, by=1)
### All of the four lines above are examples of valid solutions, you just have
### to provide one solution that works.  The only thing frowned upon would be
### to type out the answer, as in x <- c(1, 2, 3, 4, ... ,100)
##################################################################################
### Assignment starts
##################################################################################
### First part, variable assignment
# Create the variable
# << y >> : a vector of length 100 which has the even numbers from 2 to 200.
# For clarity put your code here, directly below the
y<- seq(2,200,2)
# Create the variable
# << z >> : a vector of length 20 with character entries, "hw1", "hw2", ..., "hw20"
z<-paste("hw",1:20,sep="")
# Create the variable
# << m >> : a vector of length 100 with entries from a standard normal distribution
set.seed(42)
m<- rnorm(100)
# Create the variable
# << mean.m >> : a scalar, the mean of the numbers in << m >>
mean.m<-mean(m)
# Creat the variable
# << sd.m >> : a scalar, the standard deviation of the numbers in << m >>
sd.m<-sd(m)
# Create the variable
# << max.m >> : a scalar, the maximum of the numbers in << m >>
max.m<- max(m)
##################################################################################
### Second part, data frames
### NOTE: .rda and .RData are binary files used to save R variables for later use,
### so you can save any variables in your R workspace with the save() function
### and then later use load() to load them into R at a later date.
### Keep in mind that load() loads the file relative to the working directory
### so you need to go to
###         Session > Set Working Directory > To Source File Location
# Load family.rda that is in your hw1 folder, the variable is called family:
load("family.rda")
### Check what data type the variable is with : class(family)
### now take a look at the data frame by typing family in the console.
# Create a new data frame
# << family.men >> : a data frame that is a subset of family, with only the men
family[family$gender=="m",]
family.men<-family[family$gender=="m",]
# Create a new data frame
# << family.young >> : a data frame, subset of family, with only people *under* 40
family[family$agd<40,]
family.yong<-family[family$age<40,]
# Create a new data frame
# << family.30y68i >> : a data frame, subset of family, with only people *over* 30, *shorter* than 68 in
family[family$age>30 &family$height<68,]
family.30y68i<-family[family$age>30 & family$height<68,]
# Formula for BMI : BMI = (weight in lbs) / (height in in)^2 * 703
# Note: the dataframe has weight in lbs and height in in as required.
# Create a new variable
# << bmi >> : a vector with the BMI of each family member
bmi<-(family$weight)/(family$height)^2*703
# Create a new data frame
# << family2 >> : family with an added column of BMI, with column name bmi
family2 <- data.frame(family,bmi)
##################################################################################
View(family.yong)
