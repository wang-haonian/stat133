### length 4, one for each set of coefficients
### each element will contain a data frame with B rows
### and one or two columns, depending on whether the
### fit is for a line or a quadratic
### Return this list
a=replicate(n=B, oneBoot(data=data, degree=1))
b=replicate(n=B, oneBoot(data=data, degree=2))
c=replicate(n=B, oneBoot(data=data, fit = matrix_l, degree=1))
d=replicate(n=B, oneBoot(data=data, fit = matrix_q, degree=2))
### Replicate a call to oneBoot B times for
### each of the four conditions
coeff = list(a,b,c,d)
### Format the return value so that you have a list of
### length 4, one for each set of coefficients
### each element will contain a matrix with B columns
### and two or three rows, depending on whether the
### fit is for a line or a quadratic
### Return this list
return(coeff)
}
bootPlot = function(x, y, coeff, trueCoeff){
### x and y are the original data
### coeff is a matrix from repBoot
### trueCoeff contains the true coefficients
### that generated the data
### Make a scatter plot of data (4 scatter plots, 1 for each set up)
plot(y~x, main="Visualizing Bootstrap", xlab="x", ylab="y")
if (nrow(coeff) == 2){
mapply(abline, a=coeff[1,], b=coeff[2,], col=rgb(0,0.9,0,alpha=0.5))
}
if(nrow(coeff) == 3){
mapply(function(a,b,c){curve(a+b*x+c*(x^2), add=TRUE, col=rgb(1,0.2,0.5, alpha=0.5))},
a = coeff[1,], b=coeff[2,], c=coeff[3,])
}
curve(trueCoeff[1]+trueCoeff[2]*x+trueCoeff[3]*(x^2), col="blue", add=T, lwd=0.4)
}
### Add lines or curves for each row in coeff
### Use transparency
### You should use mapply to construct all
### 1000 of the bootstrapped lines of best fit
### Have a look at ?mapply for details.
### This can be done in ggplot2 or base graphics.
### Use trueCoeff to add true line/curve -
###  Make the true line/curve stand out
### Run your simulation by calling this function
### This function doesn't need any changing
runSim = function() {
xUnique = 1:5
trueCoeff = c(0, 1, 1)
myData = getData(coefs = trueCoeff, xs = xUnique)
expt = repBoot(data = myData)
par(mfrow = c(2, 2))
for (i in 1:4){
bootPlot(myData$x, myData$y,
coeff = expt[[i]], trueCoeff)
}
return(expt)
}
#mapply(f, c("a", "b", "c"), 1:3)
# f("a", 1), f("b",2), f("c",3)
runSim()
bootPlot = function(x, y, coeff, trueCoeff){
### x and y are the original data
### coeff is a matrix from repBoot
### trueCoeff contains the true coefficients
### that generated the data
### Make a scatter plot of data (4 scatter plots, 1 for each set up)
plot(y~x, main="Visualizing Bootstrap", xlab="x", ylab="y")
if (nrow(coeff) == 2){
mapply(abline, a=coeff[1,], b=coeff[2,], col=rgb(0,0.9,0,alpha=0.5))
}
if(nrow(coeff) == 3){
mapply(function(a,b,c){curve(a+b*x+c*(x^2), add=TRUE, col=rgb(1,0.2,0.5, alpha=0.5))},
a = coeff[1,], b=coeff[2,], c=coeff[3,])
}
curve(trueCoeff[1]+trueCoeff[2]*x+trueCoeff[3]*(x^2), col="black", add=T, lwd=4)
}
runSim()
p=2*(x)^2*y-3*x*(y)^3*z+4*(y)^2*(z)^5
# HW 2
# Graphics Skills
# Due Thursday February 12th by midnight
# This .R file should contain your code and answers to questions
# The goals of this assignment are to:
# 1. Become familiar with the variety of plotting functions available in R,
# 2. Learn which types of plots are appropriate for which types of data
# 3. Gain practice in making plots that make the data stand out,
#    facilitate comparison, and are information rich
# 4. Gain additional experience working with data frames and vectors
# The data are related to the 2012 Summer Olympics
# We have three data sets available to you:
# a. wr1500m - a data frame containing information about the
# world record in the 1500 meter men's race
# b. SO2012Ctry which is a data frame with information about
# each country that had an athlete participate in the olympics
# c. London2012ALL_ATHLETES.rda - a data frame which contains data
# on individual atheletes who participated in the 2012 Olympics
# We will be making 4 plots with these sources of data.
# You will make each plot by gradually adding more features to it.
# The help for plot.default describes many parameters that are
# available for many of the plotting functions.
# Also, ?par provides help on many other plotting parameters.
# Some of these can be set in the plot function, while others
# are set in a call to par()
##############################
# PLOT 1. World Record in Men's 1500 meter run
# When watching the summer Olympics, we might be curious
# about how much faster today's runners are compared to
# runners 50 or 100 years ago.
# A search on Wikipedia shows us tables of the times for the
# world record holder in 1500 meters dating back to 1892.
# We can use readHTMLTable() (from the package "XML" in R) and
# this function goes off to the Web and downloads the tables we
# need and reads them into R as data frames. After some text
# manipulation, we have a data frame that we can use to examine
# the world records graphically.
# Later in this semester, you will be able to do the same sort
# of thing (access data from the Web from within R and clean it
# for analysis.).  Right now, the data are available to you in
# the hw3 directory in the file WR1500MeterMen.rda.
# load the data
load("WR1500MeterMen.rda")
# The name of the object loaded is wr1500m
# The time (in the column "times") in these data are recorded in seconds,
# and they are seconds over 3 minutes.
# So a time of 70 is really 4 minutes and 10 seconds.
# Q1a. How many world records does this data frame contain?
# n.wr <- your code here
n.wr=nrow(wr1500m)
# Q1b. Use R commands to find out who currently holds the world
# record in the men's 1500 meter.
# wr.name <- your code here
wr.name=wr1500m$athlete[wr1500m$times==min(wr1500m$times)]
# Let's look at the relationship between date and time.
# Q1c. What type of variable (numeric (continuous or discrete), nominal ordinal)
# are year and times? (no need to save the output, just look at it)
# When we are examining a variable to see how it changes in time,
# we typically make a line plot, with time on the x-axes and
# the (x,y) values connected with line segments.
# Q2a. Begin by making a step plot of year by times for these data.
# (hint: use the type argument in plot)
# Don't bother to make the plot pretty yet; we will get to that later.
# But do add 180 to the times so that they are accurate measurements in seconds,
# store that in a new variable and add to the data frame.
# times_sec <- your code here
# wr1500m <- your code here
# plot( your code here )
times_sec=wr1500m$times+180
wr1500m=data.frame(wr1500m,times_sec)
plot(wr1500m$year,wr1500m$times_sec, type="s")
# Q2b. Redo the plot using a date that incorporates the month as
# well as the year. For example, in Sep 1904 the world record
# was broken by James Lightbody. Use a date of 1904.75 for this
# date. If any month is NA, use 0.5 for the fraction.
# Create a new variable, new_year, with the date in this format but
# first find and set all missing months to 0.5
# Add new_year to the dataframe.
# your code here
# new_year <- your code here
# wr1500m <- your code here
# plot( your code here )
wr1500m$month[is.na(wr1500m$month)]=6
new_year=wr1500m$year+wr1500m$month/12
wr1500m=data.frame(wr1500m,new_year)
plot(wr1500m$new_year, wr1500m$times_sec,type="s")
# Q3. The current world record was set in 1998. If we want to
# show that this record still stands in 2014, we could add a
# horizontal line segment to the plot from 1998 to 2014 at the
# 1998 record time.
# To do this: remake the plot and set the xlim parameter
# so that 2014 is included in the x-axis scale;
# then use the lines() function to add the additional segment.
# wr_1998 <- your code here
# plot( your code here )
# lines( your code here )
wr1998=new_year[wr1500m$time==min(wr1500m$times)]
wr1998
load("WR1500MeterMen.rda")
setwd("~/")
setwd("~/src/stat133/assignments/hw2")
# load the data
load("WR1500MeterMen.rda")
# The name of the object loaded is wr1500m
# The time (in the column "times") in these data are recorded in seconds,
# and they are seconds over 3 minutes.
# So a time of 70 is really 4 minutes and 10 seconds.
# Q1a. How many world records does this data frame contain?
# n.wr <- your code here
n.wr=nrow(wr1500m)
# Q1b. Use R commands to find out who currently holds the world
# record in the men's 1500 meter.
# wr.name <- your code here
wr.name=wr1500m$athlete[wr1500m$times==min(wr1500m$times)]
# Let's look at the relationship between date and time.
# Q1c. What type of variable (numeric (continuous or discrete), nominal ordinal)
# are year and times? (no need to save the output, just look at it)
# When we are examining a variable to see how it changes in time,
# we typically make a line plot, with time on the x-axes and
# the (x,y) values connected with line segments.
# Q2a. Begin by making a step plot of year by times for these data.
# (hint: use the type argument in plot)
# Don't bother to make the plot pretty yet; we will get to that later.
# But do add 180 to the times so that they are accurate measurements in seconds,
# store that in a new variable and add to the data frame.
# times_sec <- your code here
# wr1500m <- your code here
# plot( your code here )
times_sec=wr1500m$times+180
wr1500m=data.frame(wr1500m,times_sec)
plot(wr1500m$year,wr1500m$times_sec, type="s")
# Q2b. Redo the plot using a date that incorporates the month as
# well as the year. For example, in Sep 1904 the world record
# was broken by James Lightbody. Use a date of 1904.75 for this
# date. If any month is NA, use 0.5 for the fraction.
# Create a new variable, new_year, with the date in this format but
# first find and set all missing months to 0.5
# Add new_year to the dataframe.
# your code here
# new_year <- your code here
# wr1500m <- your code here
# plot( your code here )
wr1500m$month[is.na(wr1500m$month)]=6
new_year=wr1500m$year+wr1500m$month/12
wr1500m=data.frame(wr1500m,new_year)
plot(wr1500m$new_year, wr1500m$times_sec,type="s")
# Q3. The current world record was set in 1998. If we want to
# show that this record still stands in 2014, we could add a
# horizontal line segment to the plot from 1998 to 2014 at the
# 1998 record time.
# To do this: remake the plot and set the xlim parameter
# so that 2014 is included in the x-axis scale;
# then use the lines() function to add the additional segment.
# wr_1998 <- your code here
# plot( your code here )
# lines( your code here )
wr1998=new_year[wr1500m$time==min(wr1500m$times)]
wr1998
# Q4. There are two times where the record stood for several
# years - in 1944 and 1998. Let's make it easier to see these
# dates and let's include the name of the athlete who set
# the record.  This additional reference information makes
# our plot richer.
# Add two grey vertical lines. One at 1944 and the other at 1998.
# Add the runner's name next to each vertical line.
# To do this, you will need the abline() function, the text() function,
# and you might want to consider the cex, col, pos, adj parameters.
# Also, do not type in the athlete's name. Instead, use subsetting
# of wr1500m$athlete to access it.
# wr_1944 <- your code here
# abline( your code here )
# abline( your code here )
# text( your code here )
# text( your code here )
# Q5. Now we are ready to add other contextual information.
# Remake the plot as before but now adding axis labels and a title.
# This is the FINAL version of the plot of world record times.
?xlim
plot(wr1500m$new_year,wr1500m$times_sec,type="s", xlim=c(min(wr1500m$times_sec, na.r=T), 2020))
wr1998=new_year[wr1500m$time==min(wr1500m$times)]
plot(wr1500m$new_year,wr1500m$times_sec,type="s", xlim=c(min(wr1500m$times_sec, na.r=T), 2020))
plot(wr1500m$new_year,wr1500m$times_sec,type="s", xlim=c(min(wr1500m$times_sec, na.r=T), 2020))
wr1500m$month[is.na(wr1500m$month)]=6
new_year=wr1500m$year+wr1500m$month/12
wr1500m=data.frame(wr1500m,new_year)
plot(wr1500m$new_year, wr1500m$times_sec,type="s")
# Q3. The current world record was set in 1998. If we want to
# show that this record still stands in 2014, we could add a
# horizontal line segment to the plot from 1998 to 2014 at the
# 1998 record time.
# To do this: remake the plot and set the xlim parameter
# so that 2014 is included in the x-axis scale;
# then use the lines() function to add the additional segment.
# wr_1998 <- your code here
# plot( your code here )
# lines( your code here )
wr1998=new_year[wr1500m$time==min(wr1500m$times)]
plot(wr1500m$new_year,wr1500m$times_sec,type="s", xlim=c(min(wr1500m$times_sec, na.r=T), 2020))
wr1500m$month[is.na(wr1500m$month)]=6
new_year=wr1500m$year+wr1500m$month/12
wr1500m=data.frame(wr1500m,new_year)
plot(wr1500m$new_year, wr1500m$times_sec,type="s")
# Q3. The current world record was set in 1998. If we want to
# show that this record still stands in 2014, we could add a
# horizontal line segment to the plot from 1998 to 2014 at the
# 1998 record time.
# To do this: remake the plot and set the xlim parameter
# so that 2014 is included in the x-axis scale;
# then use the lines() function to add the additional segment.
# wr_1998 <- your code here
# plot( your code here )
# lines( your code here )
plot(wr1500m$new_year,wr1500m$times_sec,type="s", xlim=c(min(wr1500m$times_sec, na.r=T), 2020))
wr1998=new_year[wr1500m$time==min(wr1500m$times)]
load("WR1500MeterMen.rda")
# The name of the object loaded is wr1500m
load("WR1500MeterMen.rda")
# The name of the object loaded is wr1500m
# The time (in the column "times") in these data are recorded in seconds,
# and they are seconds over 3 minutes.
# So a time of 70 is really 4 minutes and 10 seconds.
# Q1a. How many world records does this data frame contain?
# n.wr <- your code here
n.wr=nrow(wr1500m)
# Q1b. Use R commands to find out who currently holds the world
# record in the men's 1500 meter.
# wr.name <- your code here
wr.name=wr1500m$athlete[wr1500m$times==min(wr1500m$times)]
# Let's look at the relationship between date and time.
# Q1c. What type of variable (numeric (continuous or discrete), nominal ordinal)
# are year and times? (no need to save the output, just look at it)
# When we are examining a variable to see how it changes in time,
# we typically make a line plot, with time on the x-axes and
# the (x,y) values connected with line segments.
# Q2a. Begin by making a step plot of year by times for these data.
# (hint: use the type argument in plot)
# Don't bother to make the plot pretty yet; we will get to that later.
# But do add 180 to the times so that they are accurate measurements in seconds,
# store that in a new variable and add to the data frame.
# times_sec <- your code here
# wr1500m <- your code here
# plot( your code here )
times_sec=wr1500m$times+180
wr1500m=data.frame(wr1500m,times_sec)
plot(wr1500m$year,wr1500m$times_sec, type="s")
# Q2b. Redo the plot using a date that incorporates the month as
# well as the year. For example, in Sep 1904 the world record
# was broken by James Lightbody. Use a date of 1904.75 for this
# date. If any month is NA, use 0.5 for the fraction.
# Create a new variable, new_year, with the date in this format but
# first find and set all missing months to 0.5
# Add new_year to the dataframe.
# your code here
# new_year <- your code here
# wr1500m <- your code here
# plot( your code here )
wr1500m$month[is.na(wr1500m$month)]=6
new_year=wr1500m$year+wr1500m$month/12
wr1500m=data.frame(wr1500m,new_year)
plot(wr1500m$new_year, wr1500m$times_sec,type="s")
# Q3. The current world record was set in 1998. If we want to
# show that this record still stands in 2014, we could add a
# horizontal line segment to the plot from 1998 to 2014 at the
# 1998 record time.
# To do this: remake the plot and set the xlim parameter
# so that 2014 is included in the x-axis scale;
# then use the lines() function to add the additional segment.
# wr_1998 <- your code here
plot(wr1500m$new_year,wr1500m$times_sec,type="s", xlim=c(min(wr1500m$times_sec, na.r=T), 2020))
xlim=c(min(wr1500m$times_sec, na.rm=T), 2020))
Ylim=c(min(wr1500m$times_sec, na.rm=T), 2020))
plot(wr1500m$new_year, wr1500m$times_sec, type="s",
Ylim=c(min(wr1500m$times_sec, na.rm=T), 2020))
plot(wr1500m$new_year, wr1500m$times_sec, type="s",
ylim=c(min(wr1500m$times_sec, na.rm=T), 2020))
xlim=c(min(wr1500m$times_sec, na.rm=T), 2020))
plot(wr1500m$new_year, wr1500m$times_sec, type="s",
xlim=c(min(wr1500m$times_sec, na.rm=T), 2020))
wr1500m$times_sec
min(wr1500m$times_sec)
wr1500m$new_year
load("WR1500MeterMen.rda")
n.wr=nrow(wr1500m)
wr.name=wr1500m$athlete[wr1500m$times==min(wr1500m$times)]
times_sec=wr1500m$times+180
wr1500m=data.frame(wr1500m,times_sec)
plot(wr1500m$year,wr1500m$times_sec, type="s")
times_sec=wr1500m$times+180
wr1500m=data.frame(wr1500m,times_sec)
plot(wr1500m$year,wr1500m$times_sec, type="s")
wr1500m$month[is.na(wr1500m$month)]=6
new_year=wr1500m$year+wr1500m$month/12
wr1500m=data.frame(wr1500m,new_year)
plot(wr1500m$new_year, wr1500m$times_sec,type="s")
plot(wr1500m$new_year, wr1500m$times_sec, type="s",
xlim=c(min(wr1500m$times_sec, na.rm=T), 2020))
plot(wr1500m$new_year, wr1500m$times_sec, type="s",
)
xlim=c(min(wr1500m$times_sec, na.rm=T), 2020)
plot(wr1500m$new_year, wr1500m$times_sec, type="s")
xlim=c(min(wr1500m$times_sec, na.rm=T), 2020)
wr_1998=new_year[wr1500m$times==min(wr1500m$times_sec)]
plot(wr1500m$new_year, wr1500m$times_sec, type="s")
xlim=c(wr_1998, 2020)
plot(wr1500m$new_year, wr1500m$times_sec, type="s",
xlim=c(wr_1998, 2020))
wr_1998=new_year[wr1500m$times==min(wr1500m$times_sec)]
plot(wr1500m$new_year, wr1500m$times_sec, type="s",
xlim=c(1998, 2020))
plot(wr1500m$new_year, wr1500m$times_sec, type="s",
xlim=c(min(wr1500m$new_year, na.rm=T), 2020))
wr_1998=new_year[wr1500m$times==min(wr1500m$times_sec)]
plot(wr1500m$new_year, wr1500m$times_sec, type="s",
xlim=c(min(wr1500m$new_year, na.rm=T), 2020))
wr1500m$new_year
xlim=c(min(wr1500m$new_year, na.rm=T), 2020), ylim=wr_1998)
plot(wr1500m$new_year, wr1500m$times_sec, type="s",
xlim=c(min(wr1500m$new_year, na.rm=T), 2020), ylim=wr_1998)
xlim=c(min(wr1500m$new_year, na.rm=T), 2020), ylim=c(wr_1998, wr_1998)
plot(wr1500m$new_year, wr1500m$times_sec, type="s",
xlim=c(min(wr1500m$new_year, na.rm=T), 2020), ylim=c(wr_1998, wr_1998)
wr_1998=new_year[wr1500m$times==min(wr1500m$times_sec)]
plot(wr1500m$new_year, wr1500m$times_sec, type="s",
xlim=c(min(wr1500m$new_year, na.rm=T), 2020), ylim=c(wr_1998, wr_1998))
?rep
?abeline
?abline
abline(v=wr1500m$new_year==1944)
abline(v=wr1500m$new_year==1944, col="red")
wr_1998=new_year[wr1500m$times==min(wr1500m$times_sec)]
plot(wr1500m$new_year, wr1500m$times_sec, type="s",
xlim=c(min(wr1500m$new_year, na.rm=T), 2020))
abline(v=wr1500m$new_year==1944, col="red")
abline(v=wr1500m$new_year==1944, col="red")
abline(v=wr1500m$new_year==1944, col="red")
wr1944=wr1500m$new_year==1944
abline(v=wr_1944, col="red")
wr_1944=wr1500m$new_year==1944
abline(v=wr_1944, col="red")
wr_1944=new_year[wr1500m$new_year==1944]
abline(v=wr_1944, col="red")
wr_1944=new_year[wr1500m$year==1944]
abline(v=wr_1944, col="red")
abline(v=wr_1998, col="yelow")
wr_1998=new_year[wr1500m$times==min(wr1500m$times_sec)]
wr_1998=new_year[wr1500m$times==min(wr1500m$times_sec)]
load("WR1500MeterMen.rda")
# The name of the object loaded is wr1500m
# The time (in the column "times") in these data are recorded in seconds,
# and they are seconds over 3 minutes.
# So a time of 70 is really 4 minutes and 10 seconds.
# Q1a. How many world records does this data frame contain?
# n.wr <- your code here
n.wr=nrow(wr1500m)
# Q1b. Use R commands to find out who currently holds the world
# record in the men's 1500 meter.
# wr.name <- your code here
wr.name=wr1500m$athlete[wr1500m$times==min(wr1500m$times)]
# Let's look at the relationship between date and time.
# Q1c. What type of variable (numeric (continuous or discrete), nominal ordinal)
# are year and times? (no need to save the output, just look at it)
# When we are examining a variable to see how it changes in time,
# we typically make a line plot, with time on the x-axes and
# the (x,y) values connected with line segments.
# Q2a. Begin by making a step plot of year by times for these data.
# (hint: use the type argument in plot)
# Don't bother to make the plot pretty yet; we will get to that later.
# But do add 180 to the times so that they are accurate measurements in seconds,
# store that in a new variable and add to the data frame.
# times_sec <- your code here
# wr1500m <- your code here
# plot( your code here )
times_sec=wr1500m$times+180
wr1500m=data.frame(wr1500m,times_sec)
plot(wr1500m$year,wr1500m$times_sec, type="s")
# Q2b. Redo the plot using a date that incorporates the month as
# well as the year. For example, in Sep 1904 the world record
# was broken by James Lightbody. Use a date of 1904.75 for this
# date. If any month is NA, use 0.5 for the fraction.
# Create a new variable, new_year, with the date in this format but
# first find and set all missing months to 0.5
# Add new_year to the dataframe.
# your code here
# new_year <- your code here
# wr1500m <- your code here
# plot( your code here )
wr1500m$month[is.na(wr1500m$month)]=6
new_year=wr1500m$year+wr1500m$month/12
wr1500m=data.frame(wr1500m,new_year)
plot(wr1500m$new_year, wr1500m$times_sec,type="s")
# Q3. The current world record was set in 1998. If we want to
# show that this record still stands in 2014, we could add a
# horizontal line segment to the plot from 1998 to 2014 at the
# 1998 record time.
# To do this: remake the plot and set the xlim parameter
# so that 2014 is included in the x-axis scale;
# then use the lines() function to add the additional segment.
# wr_1998 <- your code here
# plot( your code here )
# lines( your code here )
wr_1998=new_year[wr1500m$times==min(wr1500m$times_sec)]
plot(wr1500m$new_year, wr1500m$times_sec, type="s",
xlim=c(min(wr1500m$new_year, na.rm=T), 2020))
wr_1944=new_year[wr1500m$year==1944]
abline(v=wr_1944, col="red")
abline(v=wr_1998, col="yelow")
abline(v=wr_1998, col="yellow")
abline(v=wr_1998, col="black")
wr_1998=new_year[wr1500m$year==min(wr1500m$times_sec)]
wr_1998=new_year[wr1500m$year==min(wr1500m$times_sec)]
wr_1998 = new_year[wr1500m$times == min(wr1500m$times)]
wr_1998
lines(x=c(wr_1998, 2014 + 9/12), y = rep(wr1500m$times_sec[51], 2))
wr_1944=new_year[wr1500m$year==1944]
abline(v=wr_1944, col="red")
abline(v=wr_1998, col="black")
load("SummerOlympics2012Ctry.rda")
SO2012Ctry
View(SO2012Ctry)
plot(SO2012Ctry$GDP, SO2012Ctry$pop, type="s")
plot(SO2012Ctry$GDP, SO2012Ctry$pop, type="l")
plot(SO2012Ctry$GDP, SO2012Ctry$pop, type="c")
plot(SO2012Ctry$pop,SO2012Ctry$GDP)
GDP_per_person=SO2012Ctry$GDP/SO2012Ctry$pop
?symbols
symbols(log(SO2012Ctry$pop), log(GDP_per_person), circles = .1)
symbols(log(SO2012Ctry$pop), log(GDP_per_person), circles = sque(SO2012Ctry$Total)/37)
symbols(log(SO2012Ctry$pop), log(GDP_per_person), circles = squR(SO2012Ctry$Total)/37)
symbols(log(SO2012Ctry$pop), log(GDP_per_person), circles = squr(SO2012Ctry$Total)/37)
symbols(log(SO2012Ctry$pop), log(GDP_per_person), circles = sqrt(SO2012Ctry$Total)/37)
symbols(log(SO2012Ctry$pop), log(GDP_per_person), circles = sqrt(SO2012Ctry$Total)/37, inches = F)
SO2012Ctry=data.frame(SO2012Ctry,GDP_per_person)
?with
