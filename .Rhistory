#  coeff = lm$coefficients
#  return (coeff)
#}
oneBoot = function(data, fit = NULL, degree = 1){
###  data are either your data (from call to getData)
###  OR fit and errors from fit of line to data
###  OR fit and errors from fit of quadratic to data
if (is.null(fit)){
new_y = genBootY(data$x, data$y)
}
else{
new_y = genBootR(fit = fit[,1], err=fit[,2])
}
return(fitModel(data$x, new_y, degree=degree)) #return the coefficient
}
# resdiual = data - fit
### Use fitModel to fit a model to this bootstrap Y
repBoot = function(data, B = 1000){
### Set up the inputs you need for oneBoot, i.e.,
### create errors and fits for line and quadratic
model_l = lm(data$y~data$x)
errors_l = model_l$residuals
fits_l = model_l$fitted.values
matrix_l = data.frame(fits_l, errors_l)
model_q = lm (data$y~data$x + I(data$x^2))
errors_q = model_q$residuals
fits_q = model_q$fitted.values
matrix_q=data.frame(fits_q, errors_q)
### replicate a call to oneBoot B times
### format the return value so that you have a list of
### length 4, one for each set of coefficients
### each element will contain a data frame with B rows
### and one or two columns, depending on whether the
### fit is for a line or a quadratic
### Return this list
a=replicate(n=B, oneBoot(data=data, degree=1))
b=replicate(n=B, oneBoot(data=data, degree=2))
c=replicate(n=B, oneBoot(data=data, fit = matrix_l, degree=1))
d=replicate(n=B, oneBoot(data=data, fit = matrix_q, degree=2))
### Replicate a call to oneBoot B times for
### each of the four conditions
coeff = list(a,b,c,d)
### Format the return value so that you have a list of
### length 4, one for each set of coefficients
### each element will contain a matrix with B columns
### and two or three rows, depending on whether the
### fit is for a line or a quadratic
### Return this list
return(coeff)
}
bootPlot = function(x, y, coeff, trueCoeff){
### x and y are the original data
### coeff is a matrix from repBoot
### trueCoeff contains the true coefficients
### that generated the data
### Make a scatter plot of data (4 scatter plots, 1 for each set up)
plot(data$y~data$x, main="Visualizing Bootstrap", xlab="x", ylab="y")
if (nrow(coeff) == 2){
mapply(abline, a=coeff[1,], b=coeff[2,], col=rgb(0,1,0,alpha=0.5))
} #linear
if(nrow(coeff) == 3){
mapply(function(a,b,c){curve(a+b*x+c*(x^2), add=TRUE, col=rgb(1,0.2,0.5, alpha=0.5))},
a = coeff[1,], b=coeff[2,], c=coeff[3,])
}
curve(trueCoeff[1]+trueCoeff[2]*x+trueCoeff[3]*(x^2), col="blue", add=T, lwd=0.4)
}
### Add lines or curves for each row in coeff
### Use transparency
### You should use mapply to construct all
### 1000 of the bootstrapped lines of best fit
### Have a look at ?mapply for details.
### This can be done in ggplot2 or base graphics.
### Use trueCoeff to add true line/curve -
###  Make the true line/curve stand out
### Run your simulation by calling this function
### This function doesn't need any changing
runSim = function() {
xUnique = 1:5
trueCoeff = c(0, 1, 1)
myData = getData(coefs = trueCoeff, xs = xUnique)
expt = repBoot(data = myData)
par(mfrow = c(2, 2))
for (i in 1:4){
bootPlot(myData$x, myData$y,
coeff = expt[[i]], trueCoeff)
}
return(expt)
}
#mapply(f, c("a", "b", "c"), 1:3)
# f("a", 1), f("b",2), f("c",3)
xUnique = 1:5
trueCoeff = c(0, 1, 1)
getData = function(coefs = c(0, 1, 1), xs = 1:5, dupl = 10,
sd = 5, seed=2222){
### This function creates the artificial data
set.seed(seed)
x = rep(xs, each = dupl)
y = coefs[1] + coefs[2]*x + coefs[3] * x^2 +
rnorm(length(x), 0, sd)
return(data.frame(x, y))
}
###
genBootY = function(x, y, rep = TRUE){
### For each unique x value, take a sample of the
### corresponding y values, with replacement.
### Return a vector of random y values the same length as y
### You can assume that the xs are sorted
### Hint use tapply here!
sample_y = tapply(y, x, sample, replace=TRUE)
return (unlist(sample_y))
}
genBootR = function(fit, err, rep = TRUE){
### Sample the errors
### Add the errors to the fit to create a y vector
### Return a vector of y values the same length as fit
### HINT: It can be easier to sample the indices than the values
sample_error = sample(err, size = length(err), replace= FALSE)
#fit[,1] = fit[,1] + sample_error
#return (fit[,1])
y<-fit+sample_error
return(y)
}
fitModel = function(x, y, degree = 1){
### use the lm function to fit a line of a quadratic
### e.g. y ~ x or y ~ x + I(x^2)
### y and x are numeric vectors of the same length
### Return the coefficients as a vector
### HINT: Take a look at the repBoot function to see how to use lm()
if (degree == 1){
lm=lm(y~x)
coeff = lm$coefficients
return(coeff)
}
if (degree==2){
lm = lm (y~x + I(x^2)) ## I not defined?
coeff = lm$coefficients
return (coeff)
}
}
#fitModel2 = function(x,y, degree = 2){
#  lm = lm (y~x + I(x^2))
#  coeff = lm$coefficients
#  return (coeff)
#}
oneBoot = function(data, fit = NULL, degree = 1){
###  data are either your data (from call to getData)
###  OR fit and errors from fit of line to data
###  OR fit and errors from fit of quadratic to data
if (is.null(fit)){
new_y = genBootY(data$x, data$y)
}
else{
new_y = genBootR(fit = fit[,1], err=fit[,2])
}
return(fitModel(data$x, new_y, degree=degree)) #return the coefficient
}
# resdiual = data - fit
### Use fitModel to fit a model to this bootstrap Y
repBoot = function(data, B = 1000){
### Set up the inputs you need for oneBoot, i.e.,
### create errors and fits for line and quadratic
model_l = lm(data$y~data$x)
errors_l = model_l$residuals
fits_l = model_l$fitted.values
matrix_l = data.frame(fits_l, errors_l)
model_q = lm (data$y~data$x + I(data$x^2))
errors_q = model_q$residuals
fits_q = model_q$fitted.values
matrix_q=data.frame(fits_q, errors_q)
### replicate a call to oneBoot B times
### format the return value so that you have a list of
### length 4, one for each set of coefficients
### each element will contain a data frame with B rows
### and one or two columns, depending on whether the
### fit is for a line or a quadratic
### Return this list
a=replicate(n=B, oneBoot(data=data, degree=1))
b=replicate(n=B, oneBoot(data=data, degree=2))
c=replicate(n=B, oneBoot(data=data, fit = matrix_l, degree=1))
d=replicate(n=B, oneBoot(data=data, fit = matrix_q, degree=2))
### Replicate a call to oneBoot B times for
### each of the four conditions
coeff = list(a,b,c,d)
### Format the return value so that you have a list of
### length 4, one for each set of coefficients
### each element will contain a matrix with B columns
### and two or three rows, depending on whether the
### fit is for a line or a quadratic
### Return this list
return(coeff)
}
bootPlot = function(x, y, coeff, trueCoeff){
### x and y are the original data
### coeff is a matrix from repBoot
### trueCoeff contains the true coefficients
### that generated the data
### Make a scatter plot of data (4 scatter plots, 1 for each set up)
plot(data$y~data$x, main="Visualizing Bootstrap", xlab="x", ylab="y")
if (nrow(coeff) == 2){
mapply(abline, a=coeff[1,], b=coeff[2,], col=rgb(0,1,0,alpha=0.5))
} #linear
if(nrow(coeff) == 3){
mapply(function(a,b,c){curve(a+b*x+c*(x^2), add=TRUE, col=rgb(1,0.2,0.5, alpha=0.5))},
a = coeff[1,], b=coeff[2,], c=coeff[3,])
}
curve(trueCoeff[1]+trueCoeff[2]*x+trueCoeff[3]*(x^2), col="blue", add=T, lwd=0.4)
}
### Add lines or curves for each row in coeff
### Use transparency
### You should use mapply to construct all
### 1000 of the bootstrapped lines of best fit
### Have a look at ?mapply for details.
### This can be done in ggplot2 or base graphics.
### Use trueCoeff to add true line/curve -
###  Make the true line/curve stand out
### Run your simulation by calling this function
### This function doesn't need any changing
runSim = function() {
xUnique = 1:5
trueCoeff = c(0, 1, 1)
myData = getData(coefs = trueCoeff, xs = xUnique)
expt = repBoot(data = myData)
par(mfrow = c(2, 2))
for (i in 1:4){
bootPlot(myData$x, myData$y,
coeff = expt[[i]], trueCoeff)
}
return(expt)
}
#mapply(f, c("a", "b", "c"), 1:3)
# f("a", 1), f("b",2), f("c",3)
y=1000
getData = function(coefs = c(0, 1, 1), xs = 1:5, dupl = 10,
sd = 5, seed=2222){
### This function creates the artificial data
set.seed(seed)
x = rep(xs, each = dupl)
y = coefs[1] + coefs[2]*x + coefs[3] * x^2 +
rnorm(length(x), 0, sd)
return(data.frame(x, y))
}
genBootY = function(x, y, rep = TRUE){
### For each unique x value, take a sample of the
### corresponding y values, with replacement.
### Return a vector of random y values the same length as y
### You can assume that the xs are sorted
### Hint use tapply here!
sample_y = tapply(y, x, sample, replace=TRUE)
return (unlist(sample_y))
}
genBootR = function(fit, err, rep = TRUE){
### Sample the errors
### Add the errors to the fit to create a y vector
### Return a vector of y values the same length as fit
### HINT: It can be easier to sample the indices than the values
sample_error = sample(err, size = length(err), replace= FALSE)
#fit[,1] = fit[,1] + sample_error
#return (fit[,1])
y<-fit+sample_error
return(y)
}
fitModel = function(x, y, degree = 1){
### use the lm function to fit a line of a quadratic
### e.g. y ~ x or y ~ x + I(x^2)
### y and x are numeric vectors of the same length
### Return the coefficients as a vector
### HINT: Take a look at the repBoot function to see how to use lm()
if (degree == 1){
lm=lm(y~x)
coeff = lm$coefficients
return(coeff)
}
if (degree==2){
lm = lm (y~x + I(x^2)) ## I not defined?
coeff = lm$coefficients
return (coeff)
}
}
oneBoot = function(data, fit = NULL, degree = 1){
###  data are either your data (from call to getData)
###  OR fit and errors from fit of line to data
###  OR fit and errors from fit of quadratic to data
if (is.null(fit)){
new_y = genBootY(data$x, data$y)
}
else{
new_y = genBootR(fit = fit[,1], err=fit[,2])
}
return(fitModel(data$x, new_y, degree=degree)) #return the coefficient
}
repBoot = function(data, B = 1000){
### Set up the inputs you need for oneBoot, i.e.,
### create errors and fits for line and quadratic
model_l = lm(data$y~data$x)
errors_l = model_l$residuals
fits_l = model_l$fitted.values
matrix_l = data.frame(fits_l, errors_l)
model_q = lm (data$y~data$x + I(data$x^2))
errors_q = model_q$residuals
fits_q = model_q$fitted.values
matrix_q=data.frame(fits_q, errors_q)
### replicate a call to oneBoot B times
### format the return value so that you have a list of
### length 4, one for each set of coefficients
### each element will contain a data frame with B rows
### and one or two columns, depending on whether the
### fit is for a line or a quadratic
### Return this list
a=replicate(n=B, oneBoot(data=data, degree=1))
b=replicate(n=B, oneBoot(data=data, degree=2))
c=replicate(n=B, oneBoot(data=data, fit = matrix_l, degree=1))
d=replicate(n=B, oneBoot(data=data, fit = matrix_q, degree=2))
### Replicate a call to oneBoot B times for
### each of the four conditions
coeff = list(a,b,c,d)
### Format the return value so that you have a list of
### length 4, one for each set of coefficients
### each element will contain a matrix with B columns
### and two or three rows, depending on whether the
### fit is for a line or a quadratic
### Return this list
return(coeff)
}
bootPlot = function(x, y, coeff, trueCoeff){
### x and y are the original data
### coeff is a matrix from repBoot
### trueCoeff contains the true coefficients
### that generated the data
### Make a scatter plot of data (4 scatter plots, 1 for each set up)
plot(data$y~data$x, main="Visualizing Bootstrap", xlab="x", ylab="y")
if (nrow(coeff) == 2){
mapply(abline, a=coeff[1,], b=coeff[2,], col=rgb(0,1,0,alpha=0.5))
} #linear
if(nrow(coeff) == 3){
mapply(function(a,b,c){curve(a+b*x+c*(x^2), add=TRUE, col=rgb(1,0.2,0.5, alpha=0.5))},
a = coeff[1,], b=coeff[2,], c=coeff[3,])
}
curve(trueCoeff[1]+trueCoeff[2]*x+trueCoeff[3]*(x^2), col="blue", add=T, lwd=0.4)
}
### Add lines or curves for each row in coeff
### Use transparency
### You should use mapply to construct all
### 1000 of the bootstrapped lines of best fit
### Have a look at ?mapply for details.
### This can be done in ggplot2 or base graphics.
runSim = function() {
xUnique = 1:5
trueCoeff = c(0, 1, 1)
myData = getData(coefs = trueCoeff, xs = xUnique)
expt = repBoot(data = myData)
par(mfrow = c(2, 2))
for (i in 1:4){
bootPlot(myData$x, myData$y,
coeff = expt[[i]], trueCoeff)
}
return(expt)
}
?predict
setwd("~/src/stat133")
set.seed(123456)
text1 <- grep("(o)", phrases, value=T)
phrases <- c("dog", "doggy", "den", "good boy", "Really?", "How much?", "Only $8", "dogdogdog", "Oh god")
text1 <- grep("(o)", phrases, value=T)
text1 <- grep("^.o+$", phrases, value=T)
text2 <- grep("^d", phrases, value=T)
no.punct <- length(grep("[:punct:]", phrases, value=T))
phrases
even<- sapply(1:1000, function(x) paste("even", x, sep=""))
even<- sapply((1:1000)*2, function(x) paste("even", x, sep=""))
hotelCal <- "On a dark desert highway, cool wind in my hair. Warm smell of colitas, rising up through the air. Up ahead in the distance, I saw a shimmering light. My head grew heavy and my sight grew dim I had to stop for the night.  There she stood in the doorway; I heard the mission bell.  And I was thinking to myself: 'This could be heaven or this could be hell'. Then she lit up a candle and she showed me the way."
?str.split
?string.split
?strsplit
hotelCal.split <- strsplit(hotelCal, split = " ")
hotelCal.split <- strsplit(hotelCal, split = " ")[[1]]
?gsub
hotelCal.split <- gsub("[:punct:]","", hotelCal.split)
hotelCal.split <- strsplit(hotelCal, split = " ")[[1]]
hotelCal.split <- gsub("[:punct:]","", hotelCal.split)
hotelCal.split <- strsplit(hotelCal, split = " ")[[1]]
hotelCal
hotelCal.split <- strsplit(hotelCal, split = " ")[[1]]
hotelCal.split <- gsub("[,.:';"]","", hotelCal.split)
hotelCal.split <- gsub("[,.:';]","", hotelCal.split)
hotelCal.split <- gsub("[A-Z]","[a-z]", hotelCal.split)
hotelCal.split <- strsplit(hotelCal, split = " ")[[1]]
hotelCal.split <- gsub("[,.:';]","", hotelCal.split)
hotelCal.split <- tolower(hotelCal.split)
gregexpr('dog', phrases)
greg('dog', phrases)
grep('dog', phrases)
?abbr
?abbre
?abbrv
abbreviate(phrases, strict = T, min.length = 1)
abbreviate(phrases, strict = T, minlength = 1)
abbreviate(phrases, strict = T, minlength = 1, method = c('left.kept'))
abbreviate <- function(vector, k){
abbr = sapply(vector, function(x) paste(strsplit(x, split = ''))[1:k] , collapse = T)
return(abbr)
}
abbreviate(phrases, 1)
abbreviate(phrases, 1)
abbreviate <- function(vector, k){
abbr = sapply(vector, function(x) paste(strsplit(x, split = '')[1:k] , collapse = T))
return(abbr)
}
abbreviate(phrases, 1)
?paste
abbreviate <- function(vector, k){
abbr = sapply(vector, function(x) paste(strsplit(x, split = '')[1:k] , collapse = ""))
return(abbr)
}
abbreviate(phrases, 1)
abbreviate <- function(vector, k){
abbr = sapply(1:length(vector), function(x) paste(strsplit(vector[x], split = '')[1:k] , collapse = ""))
return(abbr)
}
abbreviate(phrases, 1)
abbreviate <- function(vector, k){
abbr = sapply(1:length(vector), function(x) paste(strsplit(vector[x], split = '')[1:k] , sep = ""))
return(abbr)
}
abbreviate(phrases, 1)
###########################################################
#### Stat 133 Midterm 4
# leave this here:
set.seed(123456)
#### Simulation
# Write a function, [dice_sum()], that takes as input:
# [k] : the number of dice rolled
# [B] : the number of rolls
# and returns:
# [dsum] : a vector of length B where each element is the sum of a roll of k dice
# So if k=1 pick a number between 1 and 6 at random B times and return them,
# if k=2 then in each roll you pick twice a number between 1 and 6 at random,
# calculate their sum, do this B times and return
# and so on.
# We've set the default inputs to k=2 and B=100
dice_sum <- function(k, B){
dsum=sapply(1:B, function(x){
sample(1:6, k, replace=T)
})
apply(dsum, 2, sum)
}
#### String manipulation
phrases <- c("dog", "doggy", "den", "good boy", "Really?", "How much?", "Only $8", "dogdogdog", "Oh god")
# Create a vector [text1] that lists the elements in phrases
# where the SECOND TO LAST character is "o" (lower case o).
#text1 <- <your code here>
text1 <- grep("^.o+$", phrases, value=T)
# Create a vector [text2] that lists the elements in phrases that
# START with the letter "d"
#text2 <- <your code here>
text2 <- grep("^d", phrases, value=T)
# Create a variable [no.punct] that equals the number of phrases with a punctuation mark in it.
# no.punct <- <your code here>
no.punct <- length(grep("[:punct:]", phrases, value=T))
# Create a vector [even] that is of length 1000 and has the entries
# "even2", "even4", ...
# with no separation between the word and the letter
#even <- <your code here>
even<- sapply((1:1000)*2, function(x) paste("even", x, sep=""))
# Start with [hotelCal] which is a character string, create
# a _vector_ (not list) [hotelCal.split] which
# stores the words of [hotelCal] each as a separate element.
# Also, convert all upper case letters to lower case.
# Please remove all punctuation marks.
hotelCal <- "On a dark desert highway, cool wind in my hair. Warm smell of colitas, rising up through the air. Up ahead in the distance, I saw a shimmering light. My head grew heavy and my sight grew dim I had to stop for the night.  There she stood in the doorway; I heard the mission bell.  And I was thinking to myself: 'This could be heaven or this could be hell'. Then she lit up a candle and she showed me the way."
# hotelCal.split <- <your code here>
hotelCal.split <- strsplit(hotelCal, split = " ")[[1]]
hotelCal.split <- gsub("[,.:';]","", hotelCal.split)
hotelCal.split <- tolower(hotelCal.split)
# Write a function called updateDate. Your function should take the following
# arguments
#   <dates>: a character vector of dates of the form "month, year" (e.g. "May, 2001")
#   <old.yr>: a string indicating the year for which elements will be updated
#     (e.g. "2002")
#
# and return the following
#   <updated.dates>: a character vector of dates where <old.yr> has been replaced by
#     '2015'. This vector should only contain the elements whose date has been
#     updated. For example updateDate(c('May, 2008', 'June, 2011'), '2008') should
#     return 'May, 2015'.
updateDate <- function(dates, old.yr) {
data = dates[grep(old.yr, dates)]
updated.dates = gsub(old.yr, "2015", data)
return(undated.dates)
}
# Write a function called [abbreviate] that takes in a vector of strings and returns
# a vector of the same length with only the first [k] characters from the orignal vector entries.
abbreviate <- function(vector, k){
abbr = sapply(1:length(vector), function(x) paste(strsplit(vector[x], split = '')[1:k] , sep = ""))
return(abbr)
}
abbreviate(x,1)
abbreviate(phrases, 1)
abbreviate <- function(vector, k){
lol = c()
for (i in vector) {
lol = c(lol, substring(i, 1, k))
}
return (lol)
}
abbreviate(phrases, 1)
dice_sum(2,100)
dice_sum <- function(k=2, B=100){
dsum=sapply(1:B, function(x){
sample(1:6, k, replace=T)
})
apply(dsum, 2, sum)
}
